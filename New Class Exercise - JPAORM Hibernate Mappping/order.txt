package com.gl.oneToMany.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;

@Entity(name = "order_table")
public class Order {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    private String orderNumber;

    private BigDecimal totalPrice = BigDecimal.ZERO;

    // write necessary annotations
    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Product> products = new ArrayList<>();

    // Method to calculate total price
    public void calculateTotalPrice() {
        BigDecimal sum = products.stream()
            .map(p -> p.getPrice() == null ? BigDecimal.ZERO : p.getPrice())
            .reduce(BigDecimal.ZERO, BigDecimal::add);
        this.totalPrice = sum;
    }

    public Integer getId() {
        return id;
    }

    public Order(Integer id, String orderNumber, BigDecimal totalPrice, List<Product> products) {
        super();
        this.id = id;
        this.orderNumber = orderNumber;
        this.totalPrice = totalPrice;
        this.products = products != null ? products : new ArrayList<>();
    }

    public Order() {
        // default constructor
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getOrderNumber() {
        return orderNumber;
    }

    public void setOrderNumber(String orderNumber) {
        this.orderNumber = orderNumber;
    }

    public BigDecimal getTotalPrice() {
        calculateTotalPrice();
        return totalPrice;
    }

    public void setTotalPrice(BigDecimal totalPrice) {
        this.totalPrice = totalPrice;
    }

    public List<Product> getProducts() {
        return products;
    }

    public void setProducts(List<Product> products) {
        this.products.clear();
        if (products != null) {
            products.forEach(this::addProduct);
        }
    }

    public void addProduct(Product product) {
        products.add(product);
        product.setOrder(this);
    }

    public void removeProduct(Product product) {
        products.remove(product);
        product.setOrder(null);
    }
}
